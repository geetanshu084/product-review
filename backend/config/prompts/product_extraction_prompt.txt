You are an expert product data extraction system. Extract ALL available product information from the following Amazon product page content.

IMPORTANT: Return ONLY a valid JSON object. Do not include any explanatory text before or after the JSON.

Extract and structure the following information:

1. **Basic Information**: ASIN, title, brand, price, rating, total reviews, category, availability
2. **Product Details**: Dimensions, weight, color, material, model name/number, package contents, etc.
3. **Specifications**: Technical specs like capacity, power, voltage, size, compatibility, etc.
4. **Features**: All bullet points and key features mentioned
5. **Description**: Product description text
6. **Warranty**: Warranty information, duration, coverage
7. **Bank Offers**: All bank offers, credit card offers, EMI options, cashback deals
8. **Seller Information**: Seller name, rating, fulfillment method (FBA/FBM)
9. **Images**: Extract any image URLs mentioned
10. **Reviews Summary**: Extract key themes from customer reviews (positive/negative points)

PRODUCT URL: {url}

PRODUCT PAGE CONTENT:
{page_text}

Return the data in this EXACT JSON structure (include all fields, use null for missing data):

```json
{{
  "asin": "string or null",
  "url": "{url}",
  "title": "string or null",
  "brand": "string or null",
  "category": "string or null",
  "price": "string or null",
  "rating": "string (e.g., '4.5/5') or null",
  "total_reviews": "string or null",
  "availability": "string or null",

  "dimensions": "string or null",
  "weight": "string or null",
  "model_name": "string or null",
  "model_number": "string or null",
  "color": "string or null",
  "material": "string or null",

  "specifications": {{
    "key": "value"
  }},

  "product_details": {{
    "key": "value"
  }},

  "features": [
    "feature 1",
    "feature 2"
  ],

  "description": "string or null",

  "warranty": {{
    "duration": "string or null",
    "coverage": "string or null",
    "details": "string or null"
  }},

  "bank_offers": [
    {{
      "bank": "string (e.g., HDFC, ICICI, SBI, Axis, etc.) or null for generic offers",
      "offer_type": "string (e.g., 'Cashback', 'EMI', 'Discount', 'Exchange')",
      "description": "string",
      "discount_amount": numeric_value_only_or_null,
      "terms": "string or null"
    }}
  ],

  "seller_info": {{
    "name": "string or null",
    "rating": "string or null",
    "fulfillment": "string (FBA/FBM) or null"
  }},

  "images": [
    "url1",
    "url2"
  ],

  "review_summary": {{
    "positive_highlights": [
      "point 1",
      "point 2"
    ],
    "negative_highlights": [
      "point 1",
      "point 2"
    ],
    "common_themes": [
      "theme 1",
      "theme 2"
    ]
  }}
}}
```

IMPORTANT RULES:
1. Return ONLY the JSON object, no other text
2. Ensure all string values are properly escaped
3. Use null for missing data, not empty strings
4. Extract ALL available information from the page
5. For specifications and product_details, include as many key-value pairs as you can find
6. For bank_offers:
   - Extract ALL offers mentioned (credit card, debit card, EMI, cashback, exchange, etc.)
   - For discount_amount: Extract ONLY the numeric value from description (e.g., from "Upto â‚¹3,000 discount" extract 3000)
   - Remove currency symbols, commas, and decimals from discount_amount
   - If no numeric discount found, set discount_amount to null
   - For percentage discounts, convert to approximate rupee amount if base price is known, otherwise set to null
7. For review_summary, analyze the review snippets visible on the page
